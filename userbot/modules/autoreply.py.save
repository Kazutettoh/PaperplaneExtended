import asyncio

from userbot import bot

from userbot.events import register

from telethon.tl.functions.account import UpdateProfileRequest


message = "**⛔️ Al momento sono OFFLINE.\n⚠️ Scrivi tutto in un messaggio e leggerò il prima possibile!**"
mexScuola = "**⛔️ Al momento sono OFFLINE.\n⚠️ Scrivi tutto in un messaggio e leggerò il prima possibile!.**"
exempt = []
mutedList = []
autoNiceText = False

# MUTE

@register(outgoing=True, pattern="^.mute$")
async def setMute(e):
  if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
    if e.is_private and not (await e.get_sender()).bot:
      global mutedList
      if e.chat_id in mutedList:
        mutedList.remove(e.chat_id)
        await e.edit("`Sei stato smutato! Ora potrai scrivere!`")
      else:
        mutedList.append(e.chat_id)
        await e.edit("`Sei stato mutato! Qualsiasi messaggio verrà scritto sarà cancellato!`")
        
# ID

@register(outgoing=True, pattern="^.id")
async def getId(e):
  if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
    if e.is_reply:
      try:
        reply = await e.get_reply_message()
        if reply.sender.username != None:
          await e.edit(f"**🆔 @{reply.sender.username}:** `{reply.sender.id}`")
        else:
          await e.edit(f"🆔 [{reply.sender.first_name}](tg://user?id={reply.sender.id})**:** `{reply.sender.id}`")
      except:
        await e.edit("**Entità non trovata. Riprova senza usare la @**")
    else:
      try:
        text = e.text.split(" ", 1)
        entity = await e.client.get_entity(text[1])
        if hasattr(entity, 'title'):
          await e.edit(f"**🆔 {entity.title}:** `{entity.id}`")
        else:
          if entity.username != None:
            await e.edit(f"**🆔 @{entity.username}:** `{entity.id}`")
          else:
            await e.edit(f"🆔 [{entity.firstname}](tg://user?id={entity.id})**:** `{entity.id}`")
      except:
        await e.edit("**Entità non trovata. Riprova senza usare la @**")
        
# COMANDI PERSONALI

@register(outgoing=True, pattern="^sp$")
async def Channels(e):
  await e.edit("https://t.me/joinchat/AAAAAFN-hR0DUWuCTP_Y2w LINK PER ENTRARE NEL CANALE DOVE ORGANIZZEREMO I SERVER PRIVATI.\nLE PASSWORD VARIE VERRANNO DATE QUI: https://t.me/joinchat/EcrJhhXAd5o0AVhQjt8FHA")
  
@register(outgoing=True, pattern="^spam$")
async def Channels(e):
  await e.edit("👉 **I MIEI CANALI** 👈\n\n🌼 FireWolf Network: @FireWolfNetwork\n🔥Il Mio Canale: @K4yzChannel")
  
@register(outgoing=True, pattern="^pay$")
async def Channels(e):
  await e.edit("🏧 **Payment Paypal** 🏧\n\nhttps://www.paypal.me/ColuiCheVendeMaNonFa\n\n⚠️Send with family/friend and NOT with Goods and Service\n⚠️Don't write the PayPal messagge")
  
@register(outgoing=True, pattern="^disc$")
async def Channels(e):
  await e.edit("`Il Mio UserName di Discord è:` K4yz#1467")

@register(outgoing=True, pattern="^anydesk$")
async def Channels(e):
  await e.edit("`Il Mio AnyDesk è:` 892 442 481")
  
@register(outgoing=True, pattern="^ts$")
async def Channels(e):
  await e.edit("‼️ `Come entrare nel TeamSpeak`‼️\n\n💁‍♂️ Clicca Connections > Connect e digita dove c'è scritto ''server address'' scrivi **firewolf**\n\n ⚠️ Non utilizzare alcun tipo di ts. o .com solamente **firewolf**⚠️")

@register(outgoing=True, pattern="^paywait$")
async def Channels(e):
  await e.edit("✅ **Operation Completed **✅\n\n👍 `I verified your payment and now you will receive your purchase.` \n\n⚠️ Please wait 5 minutes or more ⚠️")
  
@register(outgoing=True, pattern="^success$")
async def Channels(e):
  await e.edit("✅ **Order Received** ✅\n\n👍 `Do a feedback` \n\n⚠️ Use +rep @K4yzz and write the feedback ⚠️")
  
@register(outgoing=True, pattern="^.pula$")
async def CARABINIERIIIIIIIIIII(e):
  for i in range(10):
    await asyncio.wait([e.edit("🔵🔵🔵🔵   🔴🔴🔴🔴\n🔵🔵🔵🔵   🔴🔴🔴🔴\n🔵🔵🔵🔵   🔴🔴🔴🔴\n🔵🔵🔵🔵   🔴🔴🔴🔴")])
    await asyncio.sleep(0.1)
    await asyncio.wait([e.edit("🔴🔴🔴🔴   🔵🔵🔵🔵\n🔴🔴🔴🔴   🔵🔵🔵🔵\n🔴🔴🔴🔴   🔵🔵🔵🔵\n🔴🔴🔴🔴   🔵🔵🔵🔵")])
    await asyncio.sleep(0.1)
  await asyncio.wait([e.edit("**🚨🚔 CHIAMATE IL CIENTODICIOTTOOOOO!!! 🚔🚨**")])
  
@register(outgoing=True, pattern="^.fick$")
async def CARABINIERIIIIIIIIIII(e):
  for i in range(10):
    await asyncio.wait([e.edit("👉 👌")])
    await asyncio.sleep(0.1)
    await asyncio.wait([e.edit("👌 👉")])
    await asyncio.sleep(0.1)
    await asyncio.wait([e.edit("👌 👉")])
    await asyncio.sleep(0.1)
  await asyncio.wait([e.edit("**yes bro :)**")])

# OFFLINE / ONLINE

@register(outgoing=True, pattern="^.scuola$")
async def scuola(e):
    global message
    global mexScuola
    message = mexScuola
    await e.edit("`Messaggio scuola impostato!`")
          
@register(outgoing=True, pattern="^.mex")
async def setMessage(e):
  if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
    global message
    message = str(e.text[5:])
    await e.edit("`Messaggio impostato correttamente!`")

@register(outgoing=True, pattern="^.off$")
async def changeName(e):
    if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
        name = "Federico 🦠 #Sell [𝑂𝐹𝐹𝐿𝐼𝑁𝐸]"
        await bot(UpdateProfileRequest(first_name=name, last_name=""))
        global message
        message = "**⛔️ Al momento sono OFFLINE.\n⚠️ Scrivi tutto in un messaggio e leggerò il prima possibile!.**"
        await e.edit("`Ora sei Offline`")
        
@register(outgoing=True, pattern="^.offs$")
async def changeName(e):
    if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
        name = "Federico 236451 | ᶠᶸᶜᵏᵧₒᵤ 😈😇💜"
        await bot(UpdateProfileRequest(first_name=name, last_name=""))
        global message
        message = "**⛔️ Al momento sono OFFLINE.\n⚠️ Scrivi tutto in un messaggio e leggerò il prima possibile!.**"
        await e.edit("`Ora sei Offline`")
        
@register(outgoing=True, pattern="^.on$")
async def changeName(e):
    if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
        name = "Federico 🦠 #Sell [𝑂𝑁𝐿𝐼𝑁𝐸]"
        await bot(UpdateProfileRequest(first_name=name, last_name=""))
        global message
        message = "**⛔️ Al momento sono OFFLINE.\n⚠️ Scrivi tutto in un messaggio e leggerò il prima possibile!.**"
        await e.edit("`Ora sei Online`")


# NICETEXT

@register(outgoing=True, pattern="^.niceText$")
async def setNiceText(e):
  if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
    global autoNiceText
    if autoNiceText:
      autoNiceText = False
      await e.edit("`Animazione Testo Disattivata!`")
    else:
      autoNiceText = True
      await e.edit("`Animazione Testo Attivata!`")
      
@register(outgoing=True)
async def niceText(e):
  if e.text[0].isalpha() and not e.text == "Canali":
    global autoNiceText
    if autoNiceText:
      mex = ""
      for i in range(len(e.text)):
        if e.text[i] == " ":
          mex = mex + ' '
        else:
          mex = mex + e.text[i]
        await asyncio.wait([e.edit("`" + mex + " |`")])
        await asyncio.sleep(0.1)
        await asyncio.wait([e.edit("`" + mex + "  ‏‏‎ `")])
        await asyncio.sleep(0.1)
        if i == len(e.text) - 1:
          await asyncio.wait([e.edit("`" + e.text + "`")])
          
@register(incoming=True)
async def autoReply(e):
  if e.is_private and not (await e.get_sender()).bot:
    global mutedList
    if e.chat_id in mutedList:
      await e.delete()
    else:
      if type((await e.client.get_me()).status).__name__ ==  "UserStatusOffline":
        global exempt
        if not e.sender.id in exempt:
          exempt.append(e.sender.id)
          x = 0
          while True:
            if type((await e.client.get_me()).status).__name__ ==  "UserStatusOffline":
              await asyncio.sleep(1)
              x += 1
              if x >= 300:
                global message
                await e.respond(message)
                exempt.remove(e.sender.id)
                break
            else:
              exempt.remove(e.sender.id)
              break
@register(outgoing=True, pattern="^.speedtest")
async def speedtest(event):
    if event.fwd_from:
        return
    input_str = str(message[6:8])
    as_text = False
    as_document = True
    if input_str == "image":
        as_document = False
    elif input_str == "file":
        as_document = True
    elif input_str == "text":
        as_text = True
    await event.edit("Calculating my internet speed. Please wait!")
    start = datetime.now()
    s = speedtest.Speedtest()
    s.get_best_server()
    s.download()
    s.upload()
    end = datetime.now()
    ms = (end - start).microseconds / 1000
    response = s.results.dict()
    download_speed = response.get("download")
    upload_speed = response.get("upload")
    ping_time = response.get("ping")
    client_infos = response.get("client")
    i_s_p = client_infos.get("isp")
    i_s_p_rating = client_infos.get("isprating")
    reply_msg_id = event.message.id
    if event.reply_to_msg_id:
        reply_msg_id = event.reply_to_msg_id
    try:
        response = s.results.share()
        speedtest_image = response
        if as_text:
            await event.edit("""**SpeedTest** completed in {} seconds
Download: {}
Upload: {}
Ping: {}
Internet Service Provider: {}
ISP Rating: {}""".format(ms, convert_from_bytes(download_speed), convert_from_bytes(upload_speed), ping_time, i_s_p, i_s_p_rating))
        else:
            await borg.send_file(
                event.chat_id,
                speedtest_image,
                caption="**SpeedTest** completed in {} seconds".format(ms),
                force_document=as_document,
                reply_to=reply_msg_id,
                allow_cache=False
            )
            await event.delete()
    except Exception as exc:
        await event.edit("""**SpeedTest** completed in {} seconds
Download: {}
Upload: {}
Ping: {}
__With the Following ERRORs__
{}""".format(ms, convert_from_bytes(download_speed), convert_from_bytes(upload_speed), ping_time, str(exc)))


def convert_from_bytes(size):
    power = 2**10
    n = 0
    units = {
        0: "",
        1: "kilobytes",
        2: "megabytes",
        3: "gigabytes",
        4: "terabytes"
    }
    while size > power:
        size /= power
        n += 1
    return f"{round(size, 2)} {units[n]}"
